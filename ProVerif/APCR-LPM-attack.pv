type nonce.

fun validateEvidence(bitstring): bitstring.


(*Symmetric Encryption*)
type key.
fun senc(bitstring, key): bitstring.
reduc forall m: bitstring, k: key; sdec(senc(m,k),k) = m.

(* Digital Signatures *)
type skey.
type pkey.
fun pk(skey): pkey.
fun sign(bitstring, skey) : bitstring.
reduc forall m: bitstring, k: skey; getmess(sign(m, k)) = m.
reduc forall m: bitstring, k: skey; checksign(sign(m, k), pk(k)) = m.

(* Hashing *)
fun hash(key) : bitstring.


free network: channel.

(* Security queries *)

event relyingPartyAccepts(key, key, nonce, bitstring).
event relyingPartyBegins(key, key, nonce).
event attesterBegins(pkey, key, bitstring, bitstring).
event verifierAccepts(pkey, key, bitstring, nonce, bitstring).
event attesterCorrupted(key).



query  PK_a: pkey, K_a: key, K_v: key, R_a: bitstring, M_a: bitstring,  c:nonce, h:bitstring, Cha:bitstring; 
inj-event(relyingPartyAccepts(K_v, K_a, c, R_a))
==> 
    event(attesterCorrupted(K_a)) ||
    (inj-event(relyingPartyBegins(K_v, K_a, c)) &&
    inj-event(attesterBegins(PK_a, K_a, M_a, Cha)) &&
    inj-event(verifierAccepts(PK_a, K_v, M_a, c, h)) &&
    h = hash(K_a) &&
    R_a = validateEvidence(M_a) &&
    Cha = senc((c, h), K_v)
    )
. 

query  K_a: key, K_v: key, R_a: bitstring, c:nonce; 
attacker(R_a) && event(relyingPartyAccepts(K_v, K_a, c, R_a))
==> false
.


let relyingPartyRP(K_a: key, K_v: key) = 
  new c: nonce;
  let h = hash(K_a) in
  let Cha = senc((c,h), K_v) in 
  event relyingPartyBegins(K_v, K_a, c);
  out(network, Cha);
  in(network, Res: bitstring);
  let (R_a: bitstring, =c , =h) = sdec(Res, K_v) in 
  event relyingPartyAccepts(K_v, K_a, c, R_a);
  (* out (network, senc(secretR_a, bitstring_to_key(R_a))). *)
  0.


let attesterA(K_a: key, SK_a: skey, PK_a: pkey) = 
  in(network, Cha: bitstring);
  new M_a: bitstring;
  let h = hash(K_a) in (* TEE is abstracted  *)
  let Ev = sign((M_a, h, Cha) , SK_a) in   
  event attesterBegins(PK_a, K_a, M_a, Cha);
  out(network, Ev);
  (* in(network, Res: bitstring);
  out(network, Res); *)
  0.

let verifierV(K_v: key, PK_a: pkey) = 
  in(network, Ev: bitstring);
  let (M_a: bitstring, h_att: bitstring, Cha: bitstring) = checksign(Ev, PK_a) in
  let (c: nonce, h_rp: bitstring) = sdec(Cha, K_v) in
  if (h_att = h_rp) then
  let R_a = validateEvidence(M_a) in
  event verifierAccepts(PK_a, K_v, M_a, c, h_rp);
  let Res = senc((R_a, c, h_rp), K_v) in 
  out(network, Res);
  0.


process (* main method *)
  new K_a: key;
  (* let h = hash(K_a) in out(network, h); *)
  new K_v: key;
  new SK_a: skey;
  let PK_a = pk(SK_a) in out(network, PK_a); (* Attacker knows PK_a *)
  new K_a2: key;
  event attesterCorrupted(K_a2);
  new SK_a2: skey; 
  out(network, SK_a2);
  let PK_a2 = pk(SK_a2) in out(network, PK_a2);
  (* 1 RP, 2 A and 1 V *)
  ( 
      (!relyingPartyRP(K_a, K_v)) |
      (!attesterA(K_a, SK_a, PK_a)) |
      (!verifierV(K_v, PK_a)) | 


      (!relyingPartyRP(K_a2, K_v)) |
      (!attesterA(K_a2, SK_a2, PK_a2)) |
      (!verifierV(K_v, PK_a2))
  )
  